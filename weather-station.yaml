# !!!! SKONTROLOVAŤ ADC OUT ZO SMOKE SENZORU PRI ODPOJENÍ GND!!!
# SPOTLIGHT INVERT SWITCH
# ADD ADRESABLE LED MODULE
# fuse solar

#-------------------------------------------
# SUBTITUTIONS - basic definitions and description of the device
#-------------------------------------------
substitutions:
  device_name: ESP-Weatherstation
  friendly_name: Weather-station
  created_by: StudioTiiM 2021-2022
  device_description: "Complete monitoring wheater whit battery power"

#-------------------------------------------
# DEFINE PINS
# CIRCUIT AND MODULES - basic definitions and description of the device
#-------------------------------------------
  # ----- LEDS -----
  # status led (one red led) 
  status_led: GPIO02
  # spotlight (8 white leds) red on reflector module
  spotlight: GPIO26

  # ----- SMOKE SENSOR -----
  # Module: MQ-2 Smoke and Gas Sensor
  # Specification: Voltage	5V / Load resistance 20 KΩ / Heater resistance	33Ω ± 5% / Heating consumption	<800mw / Sensing Resistance	10 KΩ – 60 KΩ / Concentration Range	200 – 10000ppm / Preheat Time	Over 24 hour
  # Power consumption: preheat 135mA / standby
  # Settings: time heating and measure min 20s
  smoke_pin: GPIO39 #SVP
  # delay measure and minimal consumption battery 
  # NPN power mofset IRFZ44N 100 resistor gpio, 1k pulldown resistor to gnd
  reducer_consumption_pin: GPIO27

  # ----- TEMPERATURE / HUMIDITY / PRESSURE SENSORS -----
  # module: Dallas DS18B20
  # Circuit: 4.7k resistor data pin to VCC
  # Power consumption: 50uA
  # Measure: Solar panel / Battery
  # dallas_pin: GPIO04
  dallas_pin: GPIO23
  # (ALT. DHT21 AM2301 750uA; BMP280)
  # module: BME280 - pressure / humidity / temperature
  # Specifications: Voltage: 1.8 - 5V / Interface: I2C address: SDO LOW : 0x76 (SDO HIGH: 0x77) / Operational Range: Temperature: -40 to +85°C Humidity: 0-100% Pressure: 300-1100 hPa / Accuracy: Temperature: +-1°C Humidity: +-3% Pressure: +-1Pa
  # Power consumption: 0.4mA
  
  # ----- FAN RADIATION SHIELD -----
  # Specification: Voltage	5V / Consmption max. 150mA / 600RPM
  # FAN PWM control
  # Power consumption: normal speed 100mA / low speed 70mA
  # NPN Darlington TIP122 (120) whit 220ohm on gpio resistor
  fan_pwm_pin: GPIO18

  # ----- RAIN SENSORS -----
  # modul: MS-WH-SP-RG rain gauge
  # Specifications: volume 0.2794 l
  # Circuit: 10k resitor Digital to VCC and 104 capacitor to GND
  rain_sensor: GPIO19
  # modul: MH-RD Raindrops
  # Consumption: stadby 0uA / dry 1.4uA / full wet 10mA
  # Circuit: GND and ADC pin
  rain_drop: GPIO34
  # increasing the lifetime of raindrops module
  # Circuit: 10k resistor GPIO switch pin to ADC pin
  raindrop_switch: GPIO5

  # ----- CO2 SENSOR -----
  # module: MHZ19 Intelligent Infrared CO2 Module
  # Specifications: Voltage 3.6 - 5.5V / Average current < 18 mA / Interface level 3.3 V / Preheat time 3 min / Reponse Time T90 < 60s / Working temperature 0 ~ 50 ℃ Working humidity 0 ~ 95% RH (No condensation) / Lifespan > 5 years
  # Power consumption: preheat 85mA / standby 9mA / pwm heating 90mA (cycle 5-6s 24°C)

  # ----- SOLAR / BATTERY / MEASURING -----
  # Solar panel: 12-18V "50W"  Monocrystalline 550x550mm
  # Charger module: Charger Step Down Module XL4015 E1 / in: 4V – 37V out: 1.25V – 36V 5A ~96% (current standby 20mA) Setup: OUT 14.2V/1A (Voltage Forwarde SS34 0.5V)
  # Battery: 12V 9Ah 20h max input 13.7V/1.0A (sealed rechargeable acid battery EMOS model OT 9-12)
  #   Theoretical battery life: current consumption 300mA / Life: 8 Days
  # Measuring: INA3221 3CH DC current sensor (replacement of the shunt resistor) black board current power 350uA
  # Undervoltage protection: relay HK4001 3A 5V whit PNP BC327 connect 5V lm393 comparator switch power battery/ac power supply input
  # LDO: step down module DD2712SA (alt. OKI-78SR-5/1.5) 5V OUT (current standby 0.22mA) and holtek HT7833 3.3V OUT (stadby current 4uA)

  # ----- PARTICULATE MATTER SENSOR -----
  # module: IKEA VINDRIKTNING Particulate Matter Sensor with PM1006 pm 2.5
  # Consumption: standby 7.6mA
  # Circuit: reverse TX RX whit lever shifter
  # Minimal consumption battery NPN power mofset IRFZ44N
  # Fun 5V 30mA
  # Minimal consumption battery NPN power mofset
  # Settings: time heating and measure min 3min delay measure (10x per day)
  # reducer_consumption_pin: GPIO27 CONNECTED

  # ----- SUN SENSORS -----
  # modul: BH1750 GY-302 lux meter
  # Consumption: normal 4.4mA
  # Specifications: 3V – 5V I2C 0x23 / Range:  1 ~ 65 535 lx
  # http://wiki.sunfounder.cc/index.php?title=GY-302_BH1750_Digital_Light_Intensity_Module

  # modul: GYML8511 UV uv light uva uvb ultraviolet 
  # Consumption: normal 0.455mA
  # Photodiode sensitive to UV-A and UV-B
  # Specifications: 3V – 5V
  # http://wiki.sunfounder.cc/index.php?title=GYML8511_UV_Sensor
  uv_pin: GPIO35

  # ----- WIND -----
  # modul: WH-SP-WS01 wind speed anemometer
  # Circuit: 10k resitor Digital to VCC and 104 capacitor to GND
  # Measure 1 impulse = 0.33m/s (2.4km/h 1 impulse/s)
  wind_speed_pin: GPIO32
  # modul: WH-SP-WD wind direction
  wind_direction_pin: GPIO33

  # BUS PINS
  # i2c
  i2c_sda_pin: GPIO21
  i2c_scl_pin: GPIO22
  #uart
  uart_rx_pin: GPIO17
  uart_tx_pin: GPIO16
  uart2_rx_pin: GPIO14
  uart2_tx_pin: GPIO13

#-------------------------------------------
# VARIABILES
#-------------------------------------------

# Rain Drop sensor definitions
  resistor_value: "9.9kOhm" #rain drop resistor
  # Value of the resistance at which a significant change is considered
  # to occur
  rain_detection_threshold: "4000"
  # If the resistance increases by this value, the sensor is considered
  # to be dry
  dry_detection_threshold: "4000"
  # When booting, if the resistance is lower this value, assume sensor is wet
  wet_resistance_when_booting: "30000"
  # +------------------------------+
  # | Delay between 2 rain measure |
  # +------------------------------+
  # In dry mode
  measure_interval_dry: "30000"
  # In wet mode
  # Must be large enough not to damage the tracks prematurely
  # but small enough to be reactive enough.
  measure_interval_wet: "60000"
  # Stabilization before reading the resistance
  # A too short delay will not allow to read the low resistances
  stabilization_delay: 4sec

  # update intreval for all sensors
  update_time: 10s 

  # blade circle radius in meters
  circ_m: "0.09"
  # π
  math_pi: "3.1416"



#-------------------------------------------
# PROTOCOL SETTINGS
#-------------------------------------------
uart:
  - id: uart2 # ikea vindriktining pm1006
    rx_pin: "$uart2_rx_pin"
    tx_pin: "$uart2_tx_pin"
    baud_rate: 9600
  
  - id: uart1 # mhz-19 co2
    rx_pin: "$uart_rx_pin"
    tx_pin: "$uart_tx_pin"
    baud_rate: 9600

i2c:
  sda: "$i2c_sda_pin"
  scl: "$i2c_scl_pin"
  scan: True

dallas:
  - pin: "$dallas_pin"
    # update_interval: "$update_time"
    update_interval: 10s

#-------------------------------------------
# ESP - main settings
#-------------------------------------------
esphome:
  name: weather-station
  project:
    name: "studiotiim.weather_station"
    version: 3.0.0
  on_boot:
    then:
#-------------------------------------------
# Rain drop test on boot run
#-------------------------------------------
      - script.execute: test_resistance
      - script.execute: measure_loop
      - switch.turn_on: switch_reducer_consumption

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
api:
ota:
  password: !secret ota_pass

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: "$device_name Hotspot"
    password: "passweatherstation"

captive_portal:

#-------------------------------------------
# GLOBALS
#-------------------------------------------
globals:
#-------------------------------------------
# Rain drop globals variabile
#-------------------------------------------
  - id: measure_delay
    type: int
    restore_value: yes
    initial_value: $measure_interval_dry

#-------------------------------------------
# SCRIPTS
#-------------------------------------------
script:
#-------------------------------------------
# Rain drop scripts
#-------------------------------------------
  - id: begin_measure
    mode: single
    then:
      - switch.turn_on: resistance_bias
      - delay: $stabilization_delay

  - id: end_measure
    mode: single
    then:
      - switch.turn_off: resistance_bias

  - id: test_resistance
    mode: single
    then:
      - script.execute: begin_measure
      - script.wait: begin_measure

      - if:
          condition:
            lambda: "return id(resistance_sensor).state < $wet_resistance_when_booting;"
          then:
            - script.execute: its_raining

      - script.execute: end_measure
      - script.wait: end_measure

  - id: save_current_resistance
    then:
      - sensor.template.publish:
          id: latest_resistance_sensor
          state: !lambda "return id(resistance_sensor).state;"
      - sensor.template.publish:
          id: latest_average_resistance_sensor
          state: !lambda "return id(average_resistance_sensor).state;"

  # Currently:
  # * Rain is detected with the most recent value compared to a threshold
  # * To detect when it dries, we use the average

  # To be tested:
  # The lowest resistance that corresponds to a complete saturation
  # of the sensor is permanently recorded: If this value is not reached
  # but the resistance does not decrease during a period of time,
  # we know that it is not raining anymore.

  - id: update_average_values
    mode: single
    then:
      # Set the average resistance
      - if:
          condition:
            lambda: "return (id(resistance_sensor).state >= 0 && id(resistance_sensor).state <= 50000);"
          then:
            - sensor.template.publish:
                id: average_resistance_sensor
                state: !lambda "return id(resistance_sensor).state;"

  - id: measure
    mode: single
    then:
      - script.execute: begin_measure
      - script.wait: begin_measure

      # Init latest resistance value if not a number
      - if:
          condition:
            lambda: "return isnan(id(latest_resistance_sensor).state);"
          then:
            - script.execute: save_current_resistance
            - script.wait: save_current_resistance
      - if:
          condition:
            lambda: "return isnan(id(latest_average_resistance_sensor).state);"
          then:
            - script.execute: save_current_resistance
            - script.wait: save_current_resistance

      - script.execute: update_average_values

      # Test for raining
      - if:
          condition:
            for:
              time: 30sec
              condition:
                lambda: "return id(resistance_sensor).state + $rain_detection_threshold < id(latest_resistance_sensor).state;"
          then:
            - script.execute: its_raining

      # Test for drying
      - if:
          condition:
            lambda: "return id(average_resistance_sensor).state - $dry_detection_threshold > id(latest_average_resistance_sensor).state;"
          then:
            - script.execute: its_drying

      # Test for dry
      # We assume sensor is dry when current resistance == max resistance
      - if:
          condition:
            lambda: "return id(resistance_sensor).state > 45000;"
          then:
            - script.execute: its_dry

      - script.execute: end_measure
      - script.wait: end_measure

  - id: measure_loop
    mode: single
    then:
      - while:
          condition:
            lambda: "return true;"
          then:
            - script.execute: measure
            - script.wait: measure
            - delay: !lambda "return id(measure_delay);"

  - id: its_raining
    mode: single
    then:
      - script.execute: save_current_resistance
      - script.wait: save_current_resistance
      - homeassistant.event:
          event: esphome.its_raining
      - text_sensor.template.publish:
          id: text_status
          state: "Raining"
      - globals.set:
          id: measure_delay
          value: $measure_interval_wet

  - id: its_drying
    mode: single
    then:
      - script.execute: save_current_resistance
      - script.wait: save_current_resistance
      - text_sensor.template.publish:
          id: text_status
          state: "Drying"
      - globals.set:
          id: measure_delay
          value: $measure_interval_wet

  - id: its_dry
    mode: single
    then:
      - script.execute: save_current_resistance
      - script.wait: save_current_resistance
      - text_sensor.template.publish:
          id: text_status
          state: "Dry"
      - globals.set:
          id: measure_delay
          value: $measure_interval_dry

#-------------------------------------------
# STATUS LED
# red led on cam spotlíght
#-------------------------------------------
status_led:
  pin:
    number: ${status_led}
#    inverted: true

#-------------------------------------------
# TEXT SENSORS
#-------------------------------------------
text_sensor:
#-------------------------------------------
# Rain drop text sensor 
# ... on boot loading
#-------------------------------------------
  - platform: template
    id: text_status
    name: "${friendly_name} Raining Sensor"
    lambda: |-
      return {"Loading"};
#      return {"Dry"};
    icon: "mdi:water-circle"
    update_interval: never

#-------------------------------------------
# Wind direction text sensor
# ... on boot loading
#-------------------------------------------
  - platform: template
    name: "${friendly_name} Wind Direction"
    id: wind_dir_card
    lambda: |-
      return {"Loading"};
    update_interval: never

#-------------------------------------------
# Battery Condition
# ... on boot loading
#-------------------------------------------
  - platform: template
    name: "${friendly_name} Battery Condition"
    id: text_battery_condition
    lambda: |-
      return {"Loading"};
    update_interval: never

#-------------------------------------------
# SENSORS
#-------------------------------------------
sensor:
#-------------------------------------------
# Wifi signal component
#-------------------------------------------
  - platform: wifi_signal
    name: "${friendly_name} Signal"
    update_interval: "$update_time"

#-------------------------------------------
# LUX sensor - BH1750
#-------------------------------------------
  - platform: bh1750
    name: "${friendly_name} LUX"
    address: 0x23
    accuracy_decimals: 0
    update_interval: "$update_time"

#-------------------------------------------
# Smoke detector - MQ-2 Smoke and Gas Sensor
#-------------------------------------------
  - platform: adc
    name: "${friendly_name} Smoke Detector"
    pin: "$smoke_pin"
    update_interval: "never"
    accuracy_decimals: 1
    id: smoke
    filters:
      # treshold 0.3V
      - lambda: 'return max((float)0.3, x);'
      - calibrate_linear: 
          - 0.3 -> 0
          - 1.0 -> 100
      - quantile:
          window_size: 5
          send_every: 5
          send_first_at: 5
          quantile: .5
    unit_of_measurement: "%"
    icon: "mdi:smoke"

#-------------------------------------------
# DALLAS temperature sensor - DS18B20 
# connected 4.7k to VCC 
#-------------------------------------------
  - platform: dallas
    address: 0xde3cc1f64821fd28
    name: "${friendly_name} Temperature Solar Panel"
    id: temp_solar
    unit_of_measurement: "°C"
    icon: mdi:water-thermometer
    on_value:
    # update bme280 sensor condition fan
      - if: 
          condition: 
            sensor.in_range:
              id: temp_solar
              above: 30.0
          then: 
            - fan.turn_on:
                id: radiationshield_fan
                speed: 80
            - delay: 15s
            - fan.turn_off:
                id: radiationshield_fan
            - component.update: temperature_temp
            - component.update: pressure_temp
            - component.update: humidity_temp
          else:
            - component.update: temperature_temp
            - component.update: pressure_temp
            - component.update: humidity_temp
       
  - platform: dallas
    address: 0xde3cc1f64821fd28
    name: "${friendly_name} Temperature Battery"
    id: temp_battery
    unit_of_measurement: "°C"
    icon: mdi:water-thermometer
    on_value:
      if:
        condition:
          sensor.in_range: 
            id: temp_battery
            above: 35.0
        then:
          - text_sensor.template.publish:
              id: text_battery_condition
              state: "Warning Hot"
        
 # doplniť 

#-------------------------------------------
# Temperature humidity pressure sensor - BME280
#-------------------------------------------
  - platform: bme280
    temperature:
      id: temperature_sensor
     # oversampling: 8x
      on_value:
        then:
          component.update: dew_point
    pressure:
      id: pressure_sensor
    humidity:
      name: "${friendly_name} Humidity"
      id: humidity_sensor
    address: 0x76
    update_interval: 10s

#-------------------------------------------
# Template - Temperature humidity pressure
# component update manually control whit fan and tempetature solar panel
#-------------------------------------------
  - platform: template
    name: "${friendly_name} Temperature"
    id: temperature_temp
    update_interval: never
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"
    lambda: "return id(temperature_sensor).state;"
  - platform: template
    name: "${friendly_name} Pressure"
    id: pressure_temp
    update_interval: never
    unit_of_measurement: "hPa"
    icon: "mdi:gauge"
    lambda: "return id(pressure_sensor).state;"
  - platform: template
    name: "${friendly_name} Humidity"
    id: humidity_temp
    update_interval: never
    unit_of_measurement: "%"
    icon: "mdi:thermometer"
    lambda: "return id(humidity_sensor).state;"

#-------------------------------------------
# Template - Dew point
#-------------------------------------------
  - platform: template
    name: "${friendly_name} Dew Point"
    id: dew_point
    icon: "mdi:thermometer"
    unit_of_measurement: "°C"
    update_interval: never
    lambda: |-
      return (id(temperature_sensor).state - (100 - id(humidity_sensor).state) / 5);  

#-------------------------------------------
# Wind Speed - WH-SP-WS01
# 
#-------------------------------------------
  - platform: pulse_counter
    pin: 
      number: "$wind_speed_pin"
      mode:
        input: true
        pullup: true
    unit_of_measurement: 'km/h'
    name: "${friendly_name} Wind Speed"
    icon: 'mdi:weather-windy'
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 1s
    # rotations_per_sec = pulses / 2 / 60
    # circ_m = 0.09 * 2 * 3.14 = 0.5652
    # mps = 1.18 * circ_m * rotations_per_sec
    # mps = 1.18 * 0.5652 / 2 / 60 = 0.0055578
    filters:
      # - multiply: 0.0055578 = m/s
      # km/h *3.6
      # - multiply: 0.02000808 = km/h
      - lambda: return x * ((1.18 * (${circ_m} * 2 * ${math_pi}) / 2 / 60) * 3.6 ); 
      - sliding_window_moving_average:
          window_size: 6
          send_every: 3

#-------------------------------------------
# Wind direction - WH-SP-WD
#-------------------------------------------
  - platform: adc
    id: source_sensor
    pin: "$wind_direction_pin"
#    name: ${friendly_name} ADC
    attenuation: 11db
    internal: true
    update_interval: "500ms"
    accuracy_decimals: 1
    filters:
      - multiply: 0.846153 # 3.9 -> 3.3V

  - platform: resistance
    sensor: source_sensor
    id: resistance_sensor_wind
    configuration: DOWNSTREAM
    resistor: 10kOhm
    internal: true
#    name: ${friendly_name} - Resistance Sensor
    reference_voltage: 3.9V
    accuracy_decimals: 1
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    on_value:
#SEVER
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 4000
              below: 5500
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "J"
            - sensor.template.publish:
                id: wind_heading
                state: 180
#SEVEROVÝCHOD
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 500
              below: 800
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "JZ"
            - sensor.template.publish:
                id: wind_heading
                state: 225
#VÝCHOD
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 1400
              below: 2200
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "Z"
            - sensor.template.publish:
                id: wind_heading
                state: 270
#JUHOVÝCHOD
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 2000
              below: 3000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "SZ"
            - sensor.template.publish:
                id: wind_heading
                state: 315
#JUH
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 7500
              below: 10000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "S"
            - sensor.template.publish:
                id: wind_heading
                state: 0
#JUHOZÁPAD
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 19500
              below: 21500
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "SV"
            - sensor.template.publish:
                id: wind_heading
                state: 45
#ZÁPAD
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 15000
              below: 17500
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "V"
            - sensor.template.publish:
                id: wind_heading
                state: 90
#SEVEROZÁPAD
      - if:
          condition:
            sensor.in_range:
              id: resistance_sensor_wind
              above: 11000
              below: 13000
          then:
            - text_sensor.template.publish:
                id: wind_dir_card
                state: "JV"
            - sensor.template.publish:
                id: wind_heading
                state: 135

  - platform: template
    name: "${friendly_name} Wind Heading"
    id: wind_heading
    unit_of_measurement: "°"

#-------------------------------------------
# UV index - GUVA-S12SD
#-------------------------------------------
  - platform: adc
    id: adcuv
    pin: "$uv_pin"
    attenuation: 11dB
    name: "UV Intensity"
    update_interval: "$update_time"
    filters:
      # No value lower than 0
      - lambda: 'return max((float)0.99, x);'
      # No value greater than $max_resistance
      - lambda: 'return min((float)2.8, x);'
    unit_of_measurement: 'mW/cm^2'
    on_value:
      then:
        component.update: uv_index

  - platform: template
    name: "${friendly_name} UV Index"
    id: uv_index
    lambda: |-
       return ((id(adcuv).state - 1.0) * (15.0 - 0.0) / (2.8 - 1.0) + 0.0);
       // calibrate whit hydrometeorology institute
       // return ((id(adcuv).state - 0.99) * (15.0 - 0.0) / (2.8 - 0.99) + 0.0);
    update_interval: "never"
    unit_of_measurement: "UV"
    icon: 'mdi:sunglasses'
    filters:
      - calibrate_linear:
          # Map 0.0 (from sensor) to 0.0 (true value)
          - 0.2 -> 0.0
          - 0.49 -> 0.1
          - 1.4 -> 5.0
          - 3.5 -> 8.0
      - lambda: 'return max((float)0, x);'
 
#-------------------------------------------
# Rain drops sensor adc
#-------------------------------------------
  - platform: adc
    id: source_sensor2
    pin: "$rain_drop"
    attenuation: 11db
    internal: true
    # It is important to have a low update interval so that
    # the measurement has time to be done correctly during
    # the activation of the voltage AND taking into account the median filter
    update_interval: 1000ms
    filters:
      - median:
          window_size: 10
          send_every: 5
          send_first_at: 5

  - platform: resistance
    sensor: source_sensor2
    id: real_resistance_sensor
    name: "${friendly_name} Resistance"
    configuration: DOWNSTREAM
    resistor: $resistor_value
    reference_voltage: 3.3V
    internal: true
    icon: "mdi:omega"
    filters:
      # No value lower than 0
      - lambda: 'return max((float)1000, x);'
      # No value greater than $max_resistance
      - lambda: 'return min((float)50000, x);'
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                  return (
                      id(real_resistance_sensor).state > 1000
                      &&
                      // <= is important to force the resistance to the max
                      // in order to have a value to compare if the
                      // resistance drops
                      id(real_resistance_sensor).state <= 50000
                  );
            then:
              - sensor.template.publish:
                  id: resistance_sensor
                  state: !lambda "return id(real_resistance_sensor).state;"

  - platform: template
    id: latest_resistance_sensor
    name: "${friendly_name} latest resistance"
    icon: "mdi:omega"
    unit_of_measurement: 'Ω'
    internal: true

  - platform: template
    id: latest_average_resistance_sensor
    name: "${friendly_name} latest average resistance"
    icon: "mdi:omega"
    unit_of_measurement: 'Ω'
    internal: true

  - platform: template
    id: resistance_sensor
    name: "${friendly_name} RainDrop Resistance"
    icon: "mdi:omega"
    unit_of_measurement: 'Ω'

  - platform: template
    id: average_resistance_sensor
    name: "${friendly_name} average resistance"
    icon: "mdi:omega"
    unit_of_measurement: 'Ω'
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 5
      #- heartbeat: 2min
    internal: true

#-------------------------------------------
# CO2 sensor - MHZ19
#-------------------------------------------
  - platform: mhz19
    co2:
      name: "${friendly_name} CO2"
    temperature:
      name: "${friendly_name} Temperature CO2"
    update_interval: "$update_time"
    automatic_baseline_calibration: true
    uart_id: uart1
    id: mhz19_co2

#-------------------------------------------
# Electricity component - INA3221 3CH DC current sensor
#-------------------------------------------
  - platform: ina3221
    address: 0x40
    #solar panel
    channel_1:
      shunt_resistance: 0.1 ohm
      current:
        name: "${friendly_name} Current Solar"
        accuracy_decimals: 3
        id: current_solar
      power:
        name: "${friendly_name} Power Solar"
        accuracy_decimals: 2
        id: solar_power
      bus_voltage:
        name: "${friendly_name} Voltage Solar"
      shunt_voltage:
        name: "${friendly_name} - Shunt Voltage Solar"
        internal: true
    # battery charge
    channel_2:
      shunt_resistance: 0.1 ohm
      current:
        name: "${friendly_name} Current Battery"
        id: current_battery
      power:
        name: "${friendly_name} Power Battery"
      bus_voltage:
        name: "${friendly_name} Voltage Battery"
        id: battery_voltage
        #battery condition script
        on_value:
          - if:
              condition:
                sensor.in_range:
                  id: temp_battery
                  above: 35.0
              then:
                - text_sensor.template.publish:
                    id: text_battery_condition
                    state: "WARNING OVERHEAT!"
              else:
                - if:
                    condition:
                      lambda: "return (id(current_solar).state) > id(current_out).state;"
                    then:
                      - text_sensor.template.publish:
                          id: text_battery_condition
                          state: "CHARGE"
                    else:
                      - if:
                          condition:
                            sensor.in_range:
                              id: battery_voltage
                              above: 13.6
                          then:
                            - text_sensor.template.publish:
                                id: text_battery_condition
                                state: "FULL"
                      - if:
                          condition:
                            sensor.in_range:
                              id: battery_voltage
                              below: 13.6
                              above: 11.2
                          then:
                            - text_sensor.template.publish:
                                id: text_battery_condition
                                state: "OK"
                      - if:
                          condition:
                            sensor.in_range:
                              id: battery_voltage
                              below: 11.2
                          then:
                            - text_sensor.template.publish:
                                id: text_battery_condition
                                state: "LOW"
          


      shunt_voltage:
        name: "${friendly_name} Shunt Voltage Battery"
        internal: true
    #out
    channel_3:
      shunt_resistance: 0.1 ohm
      current:
        name: "${friendly_name} Current Out"
        accuracy_decimals: 3
        id: current_out
      power:
        name: "${friendly_name} Power Out"
        accuracy_decimals: 2
      bus_voltage:
        name: "${friendly_name} Voltage Out"
      shunt_voltage:
        name: "${friendly_name} Shunt Voltage Out"
        internal: true
    update_interval: "$update_time"

#-------------------------------------------
# Total energy
#-------------------------------------------
  - platform: total_daily_energy
    name: "${friendly_name} Solar Energy"
    power_id: solar_power
    on_value:
      then:
        - component.update: solar_radia

#-------------------------------------------
# Solar radiation component
#
# watt*(1m2/(a*b))*24
# 1 kW/m2 × (24 h/day) = (24 kWh/m2)/day
#-------------------------------------------
  - platform: template
    name: "${friendly_name} Solar Radiation"
    icon: "mdi:solar-power"
    unit_of_measurement: "(W/m2)/day"
    id: solar_radia
    lambda: |-
      return (id(solar_power).state * (1 / (0.55 * 0.55)) * 24);
    update_interval: never
    accuracy_decimals: 0

#-------------------------------------------
# Battery - template sensor units %
#-------------------------------------------
  - platform: template
    name: "${friendly_name} Battery"
    lambda: |-
      return (id(battery_voltage).state);
    filters:
      - filter_out: nan
      - calibrate_linear:
          - 14.18 -> 100
          - 9.8 -> 0
      - lambda: 'return min((float)100.0, x);'
    accuracy_decimals: 0
    update_interval: never
    entity_category: diagnostic
    unit_of_measurement: "%"
    device_class: battery
    id: battery

#-------------------------------------------
# IKEA VINDRIKTNING Particulate Matter Sensor with PM1006 inside
# pm 2.5
#-------------------------------------------
  - platform: pm1006
    pm_2_5:
      name: "${friendly_name} PM2.5"
      filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    update_interval: 3s
    uart_id: uart2

#-------------------------------------------
# Rain sensor component - MS-WH-SP-RG
#-------------------------------------------
  - platform: pulse_counter
    pin:
      number: "$rain_sensor"
      mode: INPUT_PULLUP
    unit_of_measurement: 'mm/min'
    name: "${friendly_name} Rainfall"
    icon: 'mdi:weather-rainy'
    id: rain_gauge
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    internal_filter: 13us
    update_interval: 60s
    filters:
    # volume one pulse 0.2794 l
      - multiply: 0.2794
    accuracy_decimals: 2

  - platform: total_daily_energy
    name: "${friendly_name} Rainfall Daily"
    power_id: rain_gauge
    unit_of_measurement: 'mm'
    icon: 'mdi:weather-rainy'
    # x60 To convert to aggregated rain amount
    filters:
      - multiply: 60
    accuracy_decimals: 2

#-------------------------------------------
# SWITCHES
#-------------------------------------------
switch:
#-------------------------------------------
# Spotlight - white 8x white led
#-------------------------------------------
  - platform: gpio
    pin: 
      number: "$spotlight"
      inverted: true
      mode: OUTPUT
    name: "'${friendly_name} Led White"

      

#-------------------------------------------
# Switch - Rain drop - low destruction sensor
#-------------------------------------------
  - platform: gpio
    id: resistance_bias
    name: "${friendly_name} RainDrop Test"
    icon: "mdi:power"
    pin:
      number: "$raindrop_switch"
      mode: OUTPUT
      drive_strength: 5mA

#-------------------------------------------
# CO2 sensor - MHZ19 - Auto Calibrate Baseline
#-------------------------------------------
  - platform: template
    name: "${friendly_name} MH-Z19 ABC"
    optimistic: true
    on_turn_on:
      mhz19.abc_enable: mhz19_co2
    on_turn_off:
      mhz19.abc_disable: mhz19_co2
    entity_category: config

#-------------------------------------------
# Repeat measure reducer power consumption 5V modules
# CO2, Smoke, PM2.5
# Wiring whit IRFZ44N power mofset
#-------------------------------------------
  - platform: gpio
    name: "${friendly_name} Switch"
    restore_mode: ALWAYS_OFF
    pin:
      number: "$reducer_consumption_pin"
    id: switch_reducer_consumption
    on_turn_on:
      - then:
          - delay: 4min
#          - switch.turn_off: switch_reducer_consumption

  - platform: template
    name: "${friendly_name} Switch update"
    turn_on_action:
      - then:
          # update component smoke detector 5 time (window size 5)
          - component.update: smoke
          - delay: 1s
          - component.update: smoke
          - delay: 1s
          - component.update: smoke
          - delay: 1s
          - component.update: smoke
          - delay: 1s
          - component.update: smoke
          - component.update: mhz19_co2
          - delay: 1s

#-------------------------------------------
# INTERVALS - Reducer measurement cycling
#-------------------------------------------
interval:
  - interval: 10min
    then:
      - switch.turn_on: switch_reducer_consumption

#-------------------------------------------
# TIME COMPONENT
#-------------------------------------------
time:
  - platform: sntp
    id: esptime
    timezone: "Europe/Bratislava"

#-------------------------------------------
# OUTPUTS
#-------------------------------------------
output:
#-------------------------------------------
# RadiationShield Fan 5V
# control whit PWM NPN Darlington TIP122
#-------------------------------------------
  - platform: ledc
    pin: "$fan_pwm_pin"
    frequency: 20000 Hz
    id: radiationshield_fan_pwm
    min_power: 0.65 # min power 70mA power consumption
    max_power: 0.80 # max power 150mA power consumption

fan:
  - platform: speed
    output: radiationshield_fan_pwm
    name: "${friendly_name} RadiationShield Fan"
    id: radiationshield_fan